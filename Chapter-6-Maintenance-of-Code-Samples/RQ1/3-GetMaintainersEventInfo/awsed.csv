event_id,event_type,event_repository,code_sample_event,event_created_at,event_payload,event_action,language
21401766704,PushEvent,awsed/globalWSAPI,0.0,2022-04-21T16:28:02Z,"{'push_id': 9685151401, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '568bbc2b1292767d4afff0bb533e6b3e0cea2379', 'before': '0531b0da6687086dbb563518511b5c81f06e6664', 'commits': [{'sha': '568bbc2b1292767d4afff0bb533e6b3e0cea2379', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/568bbc2b1292767d4afff0bb533e6b3e0cea2379'}]}",,TypeScript
21401741904,PushEvent,awsed/globalWSAPI,0.0,2022-04-21T16:26:42Z,"{'push_id': 9685139738, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '0531b0da6687086dbb563518511b5c81f06e6664', 'before': 'dc1f4833cb9cefb258b0d3411f723053b5b442fc', 'commits': [{'sha': '0531b0da6687086dbb563518511b5c81f06e6664', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/0531b0da6687086dbb563518511b5c81f06e6664'}]}",,TypeScript
21387779126,PushEvent,awsed/globalWSAPI,0.0,2022-04-21T01:52:26Z,"{'push_id': 9678290802, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'dc1f4833cb9cefb258b0d3411f723053b5b442fc', 'before': 'aeadfe55dd89d189ab93ff59fc7e55e368814f70', 'commits': [{'sha': 'dc1f4833cb9cefb258b0d3411f723053b5b442fc', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update App.js', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/dc1f4833cb9cefb258b0d3411f723053b5b442fc'}]}",,TypeScript
21343036911,IssueCommentEvent,aws/aws-appsync-community,0.0,2022-04-18T23:03:18Z,"{'action': 'created', 'issue': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218', 'repository_url': 'https://api.github.com/repos/aws/aws-appsync-community', 'labels_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218/labels{/name}', 'comments_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218/comments', 'events_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218/events', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/218', 'id': 1205741161, 'node_id': 'I_kwDOCkKyTs5H3iZp', 'number': 218, 'title': 'Feature Request: Enhanced filtering subscription on mutation that returns list of objects.', 'user': {'login': 'matsus2', 'id': 7176637, 'node_id': 'MDQ6VXNlcjcxNzY2Mzc=', 'avatar_url': 'https://avatars.githubusercontent.com/u/7176637?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/matsus2', 'html_url': 'https://github.com/matsus2', 'followers_url': 'https://api.github.com/users/matsus2/followers', 'following_url': 'https://api.github.com/users/matsus2/following{/other_user}', 'gists_url': 'https://api.github.com/users/matsus2/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/matsus2/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/matsus2/subscriptions', 'organizations_url': 'https://api.github.com/users/matsus2/orgs', 'repos_url': 'https://api.github.com/users/matsus2/repos', 'events_url': 'https://api.github.com/users/matsus2/events{/privacy}', 'received_events_url': 'https://api.github.com/users/matsus2/received_events', 'type': 'User', 'site_admin': False}, 'labels': [], 'state': 'open', 'locked': False, 'assignee': None, 'assignees': [], 'milestone': None, 'comments': 1, 'created_at': '2022-04-15T17:23:51Z', 'updated_at': '2022-04-18T23:03:18Z', 'closed_at': None, 'author_association': 'NONE', 'active_lock_reason': None, 'body': 'Looking at the documentation, it seems like enhanced filtering subscription only supports mutation that returns one object. https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-enhanced-filtering.html\r\n\r\nWill there be support for this use case?', 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'timeline_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218/timeline', 'performed_via_github_app': None}, 'comment': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/comments/1101837701', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/218#issuecomment-1101837701', 'issue_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/218', 'id': 1101837701, 'node_id': 'IC_kwDOCkKyTs5BrLWF', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'created_at': '2022-04-18T23:03:18Z', 'updated_at': '2022-04-18T23:03:18Z', 'author_association': 'COLLABORATOR', 'body': 'Indeed Enhance Filtering only supports top level objects/types for now however we are planning to support nexted types in the future. Would you mind sharing your use case, if possible with specific types/fields required for filtering?', 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/comments/1101837701/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'performed_via_github_app': None}}",created,HTML
21341875638,PushEvent,awsed/globalWSAPI,0.0,2022-04-18T21:17:27Z,"{'push_id': 9655484853, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'aeadfe55dd89d189ab93ff59fc7e55e368814f70', 'before': 'ac5d0db2a7460364a4a2e8a28b3ef488bef31edd', 'commits': [{'sha': 'aeadfe55dd89d189ab93ff59fc7e55e368814f70', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update client', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/aeadfe55dd89d189ab93ff59fc7e55e368814f70'}]}",,TypeScript
21341090592,PushEvent,awsed/globalWSAPI,0.0,2022-04-18T20:20:25Z,"{'push_id': 9655093887, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'ac5d0db2a7460364a4a2e8a28b3ef488bef31edd', 'before': '2c817c50218cb09e7ac298dc9f702a759d051439', 'commits': [{'sha': 'ac5d0db2a7460364a4a2e8a28b3ef488bef31edd', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/ac5d0db2a7460364a4a2e8a28b3ef488bef31edd'}]}",,TypeScript
21312102199,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T20:46:18Z,"{'push_id': 9638189409, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '2c817c50218cb09e7ac298dc9f702a759d051439', 'before': '11db0bb102970bc11137a6f362233436e7f2b1b7', 'commits': [{'sha': '2c817c50218cb09e7ac298dc9f702a759d051439', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/2c817c50218cb09e7ac298dc9f702a759d051439'}]}",,TypeScript
21312095517,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T20:45:35Z,"{'push_id': 9638185821, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '11db0bb102970bc11137a6f362233436e7f2b1b7', 'before': 'fc30fd80161bb5d8564d9ffe6d2baf61b5cc3e9d', 'commits': [{'sha': '11db0bb102970bc11137a6f362233436e7f2b1b7', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/11db0bb102970bc11137a6f362233436e7f2b1b7'}]}",,TypeScript
21312066220,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T20:42:18Z,"{'push_id': 9638169673, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'fc30fd80161bb5d8564d9ffe6d2baf61b5cc3e9d', 'before': '1b392b18500873942c1a444a35098331526c5811', 'commits': [{'sha': 'fc30fd80161bb5d8564d9ffe6d2baf61b5cc3e9d', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/fc30fd80161bb5d8564d9ffe6d2baf61b5cc3e9d'}]}",,TypeScript
21311786283,IssueCommentEvent,sbstjn/appsync-resolvers,0.0,2022-04-15T20:11:50Z,"{'action': 'created', 'issue': {'url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8', 'repository_url': 'https://api.github.com/repos/sbstjn/appsync-resolvers', 'labels_url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8/labels{/name}', 'comments_url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8/comments', 'events_url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8/events', 'html_url': 'https://github.com/sbstjn/appsync-resolvers/issues/8', 'id': 343072006, 'node_id': 'MDU6SXNzdWUzNDMwNzIwMDY=', 'number': 8, 'title': 'How do we handle errors?', 'user': {'login': 'jonsaw', 'id': 1572333, 'node_id': 'MDQ6VXNlcjE1NzIzMzM=', 'avatar_url': 'https://avatars.githubusercontent.com/u/1572333?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/jonsaw', 'html_url': 'https://github.com/jonsaw', 'followers_url': 'https://api.github.com/users/jonsaw/followers', 'following_url': 'https://api.github.com/users/jonsaw/following{/other_user}', 'gists_url': 'https://api.github.com/users/jonsaw/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/jonsaw/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/jonsaw/subscriptions', 'organizations_url': 'https://api.github.com/users/jonsaw/orgs', 'repos_url': 'https://api.github.com/users/jonsaw/repos', 'events_url': 'https://api.github.com/users/jonsaw/events{/privacy}', 'received_events_url': 'https://api.github.com/users/jonsaw/received_events', 'type': 'User', 'site_admin': False}, 'labels': [{'id': 951672937, 'node_id': 'MDU6TGFiZWw5NTE2NzI5Mzc=', 'url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/labels/help%20wanted', 'name': 'help wanted', 'color': '008672', 'default': True, 'description': 'Extra attention is needed'}], 'state': 'open', 'locked': False, 'assignee': {'login': 'sbstjn', 'id': 248965, 'node_id': 'MDQ6VXNlcjI0ODk2NQ==', 'avatar_url': 'https://avatars.githubusercontent.com/u/248965?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/sbstjn', 'html_url': 'https://github.com/sbstjn', 'followers_url': 'https://api.github.com/users/sbstjn/followers', 'following_url': 'https://api.github.com/users/sbstjn/following{/other_user}', 'gists_url': 'https://api.github.com/users/sbstjn/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/sbstjn/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/sbstjn/subscriptions', 'organizations_url': 'https://api.github.com/users/sbstjn/orgs', 'repos_url': 'https://api.github.com/users/sbstjn/repos', 'events_url': 'https://api.github.com/users/sbstjn/events{/privacy}', 'received_events_url': 'https://api.github.com/users/sbstjn/received_events', 'type': 'User', 'site_admin': False}, 'assignees': [{'login': 'sbstjn', 'id': 248965, 'node_id': 'MDQ6VXNlcjI0ODk2NQ==', 'avatar_url': 'https://avatars.githubusercontent.com/u/248965?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/sbstjn', 'html_url': 'https://github.com/sbstjn', 'followers_url': 'https://api.github.com/users/sbstjn/followers', 'following_url': 'https://api.github.com/users/sbstjn/following{/other_user}', 'gists_url': 'https://api.github.com/users/sbstjn/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/sbstjn/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/sbstjn/subscriptions', 'organizations_url': 'https://api.github.com/users/sbstjn/orgs', 'repos_url': 'https://api.github.com/users/sbstjn/repos', 'events_url': 'https://api.github.com/users/sbstjn/events{/privacy}', 'received_events_url': 'https://api.github.com/users/sbstjn/received_events', 'type': 'User', 'site_admin': False}], 'milestone': None, 'comments': 10, 'created_at': '2018-07-20T11:25:18Z', 'updated_at': '2022-04-15T20:11:49Z', 'closed_at': None, 'author_association': 'NONE', 'active_lock_reason': None, 'body': 'How do we properly pass errors? Right now, all errors are returning as `""Lambda:Unhandled""`.\r\n\r\nAny way to customize `errorType`, `errorInfo`?\r\n\r\n```\r\n{\r\n  ""data"": null,\r\n  ""errors"": [\r\n    {\r\n      ""path"": [\r\n        ""updateProject""\r\n      ],\r\n      ""data"": null,\r\n      ""errorType"": ""Lambda:Unhandled"",\r\n      ""errorInfo"": null,\r\n      ""locations"": [\r\n        {\r\n          ""line"": 15,\r\n          ""column"": 3,\r\n          ""sourceName"": null\r\n        }\r\n      ],\r\n      ""message"": ""Name required""\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThanks!', 'reactions': {'url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8/reactions', 'total_count': 8, '+1': 8, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'timeline_url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8/timeline', 'performed_via_github_app': None}, 'comment': {'url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/comments/1100365627', 'html_url': 'https://github.com/sbstjn/appsync-resolvers/issues/8#issuecomment-1100365627', 'issue_url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/8', 'id': 1100365627, 'node_id': 'IC_kwDOCBchNs5Blj87', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'created_at': '2022-04-15T20:11:49Z', 'updated_at': '2022-04-15T20:11:49Z', 'author_association': 'NONE', 'body': 'Could you please confirm if the documented solution works out for you?\r\n\r\nhttps://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-lambda.html#lambda-mapping-template-bypass-errors', 'reactions': {'url': 'https://api.github.com/repos/sbstjn/appsync-resolvers/issues/comments/1100365627/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'performed_via_github_app': None}}",created,Go
21309811567,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T17:07:30Z,"{'push_id': 9637025276, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '1b392b18500873942c1a444a35098331526c5811', 'before': '770393abc1fc00f96e5dfd33c99e9c5c284f206f', 'commits': [{'sha': '1b392b18500873942c1a444a35098331526c5811', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/1b392b18500873942c1a444a35098331526c5811'}]}",,TypeScript
21309709854,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:58:19Z,"{'push_id': 9636971614, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '770393abc1fc00f96e5dfd33c99e9c5c284f206f', 'before': '75a126c47afb9bc0cecd85fcfaa4eb644d58bdd4', 'commits': [{'sha': '770393abc1fc00f96e5dfd33c99e9c5c284f206f', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/770393abc1fc00f96e5dfd33c99e9c5c284f206f'}]}",,TypeScript
21309700067,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:57:26Z,"{'push_id': 9636966429, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '75a126c47afb9bc0cecd85fcfaa4eb644d58bdd4', 'before': '02bd798e45642d8e5bad79cc65ee083147d8dbb4', 'commits': [{'sha': '75a126c47afb9bc0cecd85fcfaa4eb644d58bdd4', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/75a126c47afb9bc0cecd85fcfaa4eb644d58bdd4'}]}",,TypeScript
21309658391,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:53:29Z,"{'push_id': 9636944488, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '02bd798e45642d8e5bad79cc65ee083147d8dbb4', 'before': '8b89f31df45d50928c01312dac4e5a1bb63a85a6', 'commits': [{'sha': '02bd798e45642d8e5bad79cc65ee083147d8dbb4', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/02bd798e45642d8e5bad79cc65ee083147d8dbb4'}]}",,TypeScript
21309653798,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:53:02Z,"{'push_id': 9636942041, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '8b89f31df45d50928c01312dac4e5a1bb63a85a6', 'before': 'cdd9cfb2a34e2259dcf60426e38ad4b6931794cc', 'commits': [{'sha': '8b89f31df45d50928c01312dac4e5a1bb63a85a6', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/8b89f31df45d50928c01312dac4e5a1bb63a85a6'}]}",,TypeScript
21309636327,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:51:26Z,"{'push_id': 9636932893, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'cdd9cfb2a34e2259dcf60426e38ad4b6931794cc', 'before': '50df8d5b80a6eaa68ce88e70f0114ccc342f4301', 'commits': [{'sha': 'cdd9cfb2a34e2259dcf60426e38ad4b6931794cc', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/cdd9cfb2a34e2259dcf60426e38ad4b6931794cc'}]}",,TypeScript
21309622975,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:50:10Z,"{'push_id': 9636925513, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '50df8d5b80a6eaa68ce88e70f0114ccc342f4301', 'before': 'c0bb3c879ca71b650807b61972c2cb1173812d64', 'commits': [{'sha': '50df8d5b80a6eaa68ce88e70f0114ccc342f4301', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/50df8d5b80a6eaa68ce88e70f0114ccc342f4301'}]}",,TypeScript
21309610972,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T16:49:03Z,"{'push_id': 9636919170, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'c0bb3c879ca71b650807b61972c2cb1173812d64', 'before': '8239697d86057f3641c6158fe7189ebccc2ac537', 'commits': [{'sha': 'c0bb3c879ca71b650807b61972c2cb1173812d64', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update instructions', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/c0bb3c879ca71b650807b61972c2cb1173812d64'}]}",,TypeScript
21301468175,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T04:09:41Z,"{'push_id': 9632598380, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '8239697d86057f3641c6158fe7189ebccc2ac537', 'before': '93babd333b5c569db79ba291b096b9d2baca558a', 'commits': [{'sha': '8239697d86057f3641c6158fe7189ebccc2ac537', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Styling update', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/8239697d86057f3641c6158fe7189ebccc2ac537'}]}",,TypeScript
21300755094,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T02:33:07Z,"{'push_id': 9632209254, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '93babd333b5c569db79ba291b096b9d2baca558a', 'before': '5c423b603f91bc1241fbaa738062aff1414eb862', 'commits': [{'sha': '93babd333b5c569db79ba291b096b9d2baca558a', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Add dropdown for channels', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/93babd333b5c569db79ba291b096b9d2baca558a'}]}",,TypeScript
21300328931,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:37:56Z,"{'push_id': 9631981496, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '5c423b603f91bc1241fbaa738062aff1414eb862', 'before': '795f3bcddb00d592d204aba731463fe526ecc409', 'commits': [{'sha': '5c423b603f91bc1241fbaa738062aff1414eb862', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/5c423b603f91bc1241fbaa738062aff1414eb862'}]}",,TypeScript
21300323914,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:37:17Z,"{'push_id': 9631978748, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '795f3bcddb00d592d204aba731463fe526ecc409', 'before': '5705c6aefd4ce7254867171d422ace85a4db0512', 'commits': [{'sha': '795f3bcddb00d592d204aba731463fe526ecc409', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/795f3bcddb00d592d204aba731463fe526ecc409'}]}",,TypeScript
21300297542,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:34:00Z,"{'push_id': 9631964311, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '5705c6aefd4ce7254867171d422ace85a4db0512', 'before': '66b0fd228d4470be5395cc4ac613e8929fe6e6da', 'commits': [{'sha': '5705c6aefd4ce7254867171d422ace85a4db0512', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/5705c6aefd4ce7254867171d422ace85a4db0512'}]}",,TypeScript
21300287859,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:32:43Z,"{'push_id': 9631958942, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '66b0fd228d4470be5395cc4ac613e8929fe6e6da', 'before': '064f6d3012e66a486185b56404a8fa92048589c2', 'commits': [{'sha': '66b0fd228d4470be5395cc4ac613e8929fe6e6da', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/66b0fd228d4470be5395cc4ac613e8929fe6e6da'}]}",,TypeScript
21300205708,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:21:49Z,"{'push_id': 9631912740, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '064f6d3012e66a486185b56404a8fa92048589c2', 'before': '77425a49a8f163b2c1cfe2dc230c0f1c9c715b5c', 'commits': [{'sha': '064f6d3012e66a486185b56404a8fa92048589c2', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/064f6d3012e66a486185b56404a8fa92048589c2'}]}",,TypeScript
21300201433,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:21:13Z,"{'push_id': 9631910345, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '77425a49a8f163b2c1cfe2dc230c0f1c9c715b5c', 'before': 'a434112d3e1d71ad7c25a1b3c6abf0eecc34c79c', 'commits': [{'sha': '77425a49a8f163b2c1cfe2dc230c0f1c9c715b5c', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/77425a49a8f163b2c1cfe2dc230c0f1c9c715b5c'}]}",,TypeScript
21300195118,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:20:23Z,"{'push_id': 9631906521, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'a434112d3e1d71ad7c25a1b3c6abf0eecc34c79c', 'before': 'e0ef3f42cef4c8028664868b81faba0d881b171d', 'commits': [{'sha': 'a434112d3e1d71ad7c25a1b3c6abf0eecc34c79c', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update instructions', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/a434112d3e1d71ad7c25a1b3c6abf0eecc34c79c'}]}",,TypeScript
21300106546,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T01:08:21Z,"{'push_id': 9631857762, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'e0ef3f42cef4c8028664868b81faba0d881b171d', 'before': '3dc6c3581702cdc910d73d82f46ddbf97e4cd518', 'commits': [{'sha': 'e0ef3f42cef4c8028664868b81faba0d881b171d', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update App.js', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/e0ef3f42cef4c8028664868b81faba0d881b171d'}]}",,TypeScript
21299783955,PushEvent,awsed/globalWSAPI,0.0,2022-04-15T00:29:23Z,"{'push_id': 9631697207, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '3dc6c3581702cdc910d73d82f46ddbf97e4cd518', 'before': 'ee8d5151a9886a22117c74a571e7fd2d114260d6', 'commits': [{'sha': '3dc6c3581702cdc910d73d82f46ddbf97e4cd518', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Adding React client', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/3dc6c3581702cdc910d73d82f46ddbf97e4cd518'}]}",,TypeScript
21298417673,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T21:53:40Z,"{'push_id': 9630986074, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'ee8d5151a9886a22117c74a571e7fd2d114260d6', 'before': '94f9e79013731ee2723dc4040a26856ab46132cb', 'commits': [{'sha': 'ee8d5151a9886a22117c74a571e7fd2d114260d6', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/ee8d5151a9886a22117c74a571e7fd2d114260d6'}]}",,TypeScript
21298380098,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T21:50:11Z,"{'push_id': 9630966949, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '94f9e79013731ee2723dc4040a26856ab46132cb', 'before': '06ca0751f5946fabf70e6623cbba4df7ff99f02c', 'commits': [{'sha': '94f9e79013731ee2723dc4040a26856ab46132cb', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/94f9e79013731ee2723dc4040a26856ab46132cb'}]}",,TypeScript
21298365432,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T21:48:49Z,"{'push_id': 9630959545, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '06ca0751f5946fabf70e6623cbba4df7ff99f02c', 'before': '76934587e8ca5c1dcc69d5cd8695d3d681566f00', 'commits': [{'sha': '06ca0751f5946fabf70e6623cbba4df7ff99f02c', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update Instructions', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/06ca0751f5946fabf70e6623cbba4df7ff99f02c'}]}",,TypeScript
21297844041,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T21:06:12Z,"{'push_id': 9630709624, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '76934587e8ca5c1dcc69d5cd8695d3d681566f00', 'before': '128a85b637f260d7ad5e2e8c977a693b8555cc6e', 'commits': [{'sha': '76934587e8ca5c1dcc69d5cd8695d3d681566f00', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/76934587e8ca5c1dcc69d5cd8695d3d681566f00'}]}",,TypeScript
21297836587,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T21:05:40Z,"{'push_id': 9630705901, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '128a85b637f260d7ad5e2e8c977a693b8555cc6e', 'before': 'af0ff2d1bea39f3fc07c2c656eb95699ecb11850', 'commits': [{'sha': '128a85b637f260d7ad5e2e8c977a693b8555cc6e', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/128a85b637f260d7ad5e2e8c977a693b8555cc6e'}]}",,TypeScript
21297820269,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T21:04:26Z,"{'push_id': 9630697823, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': 'af0ff2d1bea39f3fc07c2c656eb95699ecb11850', 'before': 'dd28379fe1ce376ccc2375078820324da799cff9', 'commits': [{'sha': 'af0ff2d1bea39f3fc07c2c656eb95699ecb11850', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/af0ff2d1bea39f3fc07c2c656eb95699ecb11850'}]}",,TypeScript
21297739957,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T20:58:15Z,"{'push_id': 9630657473, 'size': 2, 'distinct_size': 2, 'ref': 'refs/heads/main', 'head': 'dd28379fe1ce376ccc2375078820324da799cff9', 'before': '304f074fe646b85e1a4b91070b4a1c577feb1de4', 'commits': [{'sha': '4208efc2233e5cb0d865d6e4235627ac467110fe', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': 'Update README.md', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/4208efc2233e5cb0d865d6e4235627ac467110fe'}, {'sha': 'dd28379fe1ce376ccc2375078820324da799cff9', 'author': {'email': 'edlima@amazon.com', 'name': 'Ed Lima'}, 'message': ""Merge branch 'main' of https://github.com/awsed/globalWSAPI"", 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/dd28379fe1ce376ccc2375078820324da799cff9'}]}",,TypeScript
21295205520,PushEvent,awsed/globalWSAPI,0.0,2022-04-14T17:58:07Z,"{'push_id': 9629396283, 'size': 1, 'distinct_size': 1, 'ref': 'refs/heads/main', 'head': '304f074fe646b85e1a4b91070b4a1c577feb1de4', 'before': '03b24543c76d33bdf630f75d2a2c8e7789c2bc08', 'commits': [{'sha': '304f074fe646b85e1a4b91070b4a1c577feb1de4', 'author': {'email': 'awsed@users.noreply.github.com', 'name': 'Ed Lima'}, 'message': 'Delete .DS_Store', 'distinct': True, 'url': 'https://api.github.com/repos/awsed/globalWSAPI/commits/304f074fe646b85e1a4b91070b4a1c577feb1de4'}]}",,TypeScript
21295194866,CreateEvent,awsed/globalWSAPI,0.0,2022-04-14T17:57:22Z,"{'ref': 'main', 'ref_type': 'branch', 'master_branch': 'main', 'description': 'Global Serverless/Functionless WebSockets Real-time API', 'pusher_type': 'user'}",,TypeScript
21295194338,CreateEvent,awsed/globalWSAPI,0.0,2022-04-14T17:57:20Z,"{'ref': None, 'ref_type': 'repository', 'master_branch': 'main', 'description': 'Global Serverless/Functionless WebSockets Real-time API', 'pusher_type': 'user'}",,TypeScript
21295144638,CreateEvent,awsed/globalWSAPI,0.0,2022-04-14T17:54:03Z,"{'ref': 'main', 'ref_type': 'branch', 'master_branch': 'main', 'description': 'Global Serverless/Functionless WebSockets API', 'pusher_type': 'user'}",,TypeScript
21295143983,CreateEvent,awsed/globalWSAPI,0.0,2022-04-14T17:54:00Z,"{'ref': None, 'ref_type': 'repository', 'master_branch': 'main', 'description': 'Global Serverless/Functionless WebSockets API', 'pusher_type': 'user'}",,TypeScript
21129998208,IssuesEvent,aws/aws-appsync-community,0.0,2022-04-05T21:06:52Z,"{'action': 'closed', 'issue': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186', 'repository_url': 'https://api.github.com/repos/aws/aws-appsync-community', 'labels_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/labels{/name}', 'comments_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/comments', 'events_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/events', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/186', 'id': 1047818222, 'node_id': 'I_kwDOCkKyTs4-dG_u', 'number': 186, 'title': 'RFC: AppSync Enhanced Subscriptions Filtering', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'labels': [{'id': 1250088166, 'node_id': 'MDU6TGFiZWwxMjUwMDg4MTY2', 'url': 'https://api.github.com/repos/aws/aws-appsync-community/labels/rfc', 'name': 'rfc', 'color': 'e535ab', 'default': False, 'description': 'Request for Comments'}], 'state': 'closed', 'locked': False, 'assignee': None, 'assignees': [], 'milestone': None, 'comments': 21, 'created_at': '2021-11-08T19:05:22Z', 'updated_at': '2022-04-05T21:06:52Z', 'closed_at': '2022-04-05T21:06:51Z', 'author_association': 'COLLABORATOR', 'active_lock_reason': None, 'body': 'AWS AppSync leverages GraphQL subscriptions to push data to clients that choose to listen to specific events from the backend. This means that you can easily and effortlessly make any supported data source in AppSync real-time with connection management handled automatically between the client and the service. A backend service can easily broadcast data to connected clients or clients can send data to other clients, depending on the use case. Real-time data, connections, scalability, fan-out and broadcasting are all handled by intelligent client libraries and AppSync, allowing you to focus on your application business use cases and requirements instead of dealing with the complex infrastructure to manage WebSockets connections at scale. Subscriptions are invoked in response to a mutation or change in data. In other words, when data is modified via a GraphQL mutation operation, AppSync notifies subscribers of that data change on successful completion of the mutation. In short, a mutation *publishes* data which is sent to clients *subscribed* to it.\r\n\r\nCustomers using AppSync real-time subscriptions sometimes want to filter or restrict data sent to specific subscribed clients. An example could be a chat app where 1:1 conversations are private and only users in a specific conversation can receive messages. To accomplish this today, arguments can be defined in the subscription on the client side which means, for instance, AppSync can send data only to clients listening for just a particular ID. There’s a limit of 5 arguments based on strict equality (i.e. the order of arguments matter) that can be defined in a client-side subscription, which can be combined using AND logic only (i.e. events from location X AND date Y AND description Z) allowing for some flexibility when filtering data to subscribed clients (more details on https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-data.html#using-subscription-arguments). If there’s a need to invalidate an active subscription connection and refresh the data due to a change such as group membership, the client must forcibly close and re-open the WSS connection.\r\n\r\nWe’re evaluating adding service-side enhanced filtering capabilities in AppSync to enable use cases where developers would want to define fine grained filtering criteria for real-time GraphQL subscriptions on the AppSync backend itself as opposed to the client side. These service-side filters would support additional OR logic and operators such as:\r\n\r\n|Operator\t|Description\t|Allow value type\t|\r\n|---\t|---\t|---\t|\r\n|eq\t|Equal\t|Integer, String, Boolean\t|\r\n|ne\t|Not equal\t|Integer, String, Boolean\t|\r\n|le\t|Less than or equal\t|Integer\t|\r\n|lt\t|Less than\t|Integer\t|\r\n|ge\t|Greater than or equal\t|Integer\t|\r\n|gt\t|Greater than\t|Integer\t|\r\n|contains\t|Checks for a subsequence, or value in a set\t|Integer, String\t|\r\n|notContains\t|Checks for absence of a subsequence, or absence of a value in a set.\t|Integer, String\t|\r\n|beginsWith\t|Checks for a prefix\t|String\t|\r\n|in\t|Checks for matching elements in a list\t|Integer, String\t|\r\n|notIn\t|Checks for matching elements in a list\t|Integer, String\t|\r\n|between\t|Between two values\t|Interger, String\t|\r\n\r\nWe propose these new real-time enhanced filtering capabilities in AppSync would enable additional business logic for filtering or authorization to be executed at runtime whenever data is pushed to a subscribed client with filters defined in the GraphQL API backend itself as opposed to the current implementation with filtering arguments defined on the client side. As an example, if a user is removed from a group, the new capability would allow a subscription connection to be automatically invalidated without any action from the client.\r\n\r\n\r\n\r\n\r\n### Detailed Example: Filtering ###\r\n\r\nThe following details the configuration of an example ticket management system powered by an AppSync GraphQL API. Tickets are created with a mutation, data is stored in a DynamoDB table, and subscribed clients should receive notifications based on ticket severity, priority, classification or groups. \r\n\r\nEnhanced filters are enabled in the GraphQL resolver’s **Response Mapping Template** of a given subscription called `onTicketCreated` defined in the GraphQL schema and are implemented using the `$extensions.setSubscriptionFilter()` method to define a filter expression that is evaluated against published data that the subscription might be interested in. You can find more information about AppSync request/response mapping templates in https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-overview.html.\r\n\r\nA filter group defines a list or group of filters. Filters are defined with one or more of rules, each one with fields, operators and values. In the following example, multiple rules in a filter are evaluated with an AND logic and multiple filters in a filter group with an OR logic:\r\n\r\n```\r\n# Response Mapping Template - OnTicketCreated subscription\r\n\r\n$extensions.setSubscriptionFilter({\r\n    ""filterGroup"": [\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""severity"",\r\n                    ""operator"" : ""ge"",\r\n                    ""value"" : 7\r\n                },\r\n                {\r\n                    ""fieldName"" : ""priority"",\r\n                    ""operator"" : ""in"",\r\n                    ""value"" : [""high"", ""medium""]\r\n                }\r\n           ]\r\n           \r\n        },\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""classification"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : ""Security""\r\n                },\r\n                {\r\n                    ""fieldName"" : ""group"",\r\n                    ""operator"" : ""in"",\r\n                    ""value"" : [""admin"", ""operators""]\r\n                }\r\n           ]\r\n           \r\n        }\r\n    ]\r\n})\r\n\r\n$util.toJson($context.result)\r\n```\r\n\r\nWhen data is published using a mutation such as:\r\n\r\n```\r\nmutation TicketCreate{\r\n     createTicket(input: {description: ""This is a ticket."", group: ""admin"", classification: ""Security"", priority: ""high"", severity: 10}) {\r\n        id\r\n        classification\r\n        group\r\n        description\r\n        priority\r\n        severity\r\n     }\r\n }\r\n```\r\n\r\nSubscribed clients just need to have a subscription in place listening for the data to be automatically pushed via WebSockets upon ticket creation by the mutation:\r\n\r\n```\r\nsubscription OnTicketCreated{\r\n     onTicketCreated {\r\n        id\r\n        classification\r\n        group\r\n        description\r\n        priority\r\n        severity\r\n     }\r\n }\r\n```\r\n\r\nWith the service-side filters defined in the above example, important tickets will be automatically pushed to subscribed API clients if a ticket is created with either *high or medium priority* AND *severity 7 or higher* OR *classified as security tickets* assigned to either the *admin or the operators groups*. Lower priority tickets can still be manually queried however newly created tickets will be filtered in the backend and won’t be pushed in real-time to WebSocket clients. On the client side, clients just need to be subscribed with a subscription without arguments as all filters are defined service side such as:\r\n\r\n```\r\n#Amplify JS client\r\n\r\nimport Amplify, { API, graphqlOperation } from \'aws-amplify\';\r\nimport * as subscriptions from \'./graphql/subscriptions\';\r\n\r\n...\r\nconst subscription = API.graphql(\r\n    graphqlOperation(subscriptions.onTicketCreated)\r\n).subscribe({\r\n    next: ({ provider, value }) => console.log({ provider, value }),\r\n    error: error => console.warn(error)\r\n});\r\n```\r\n\r\n\r\n### Detailed Example: Invalidation ###\r\n\r\nThis example is unrelated to the ticket system on the previous example, it should be looked at in isolation.\r\n\r\nThere might be a requirement to force unsubscribe clients from the server side as opposed to use unsubscribe logic on the client side. Unsubscribing would close the connection so clients don’t receive data from the subscription anymore. This is accomplished in the following example via mutation (pub) and subscription (sub) operations defined in the GraphQL schema:\r\n\r\n```\r\n...\r\n\r\ntype User {\r\n    userID: ID!\r\n    userName: String\r\n    group: String\r\n}\r\n\r\ntype Mutation {\r\n    removeFromGroup(userID: ID!, group: String!): User\r\n}\r\n\r\ntype Subscription {\r\n    onGroupRemoval: User\r\n        @aws_subscribe(mutations: [""removeFromGroup""])\r\n}\r\n```\r\n\r\n\r\nWith enhanced filtering, active subscriptions can also be forcibly invalidated from AppSync by defining an invalidation filter with the `$extensions.setSubscriptionInvalidationFilter()` method in the subscription GraphQL resolver’s Response Mapping Template.\r\n\r\n```\r\n# Response Mapping Template - onGroupRemoval subscription\r\n\r\n$extensions.setSubscriptionInvalidationFilter({\r\n    ""filterGroup"": [\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""userID"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : $ctx.result.userID\r\n                },\r\n                {\r\n                    ""fieldName"" : ""group"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : $ctx.result.group\r\n                }\r\n           ]\r\n    ]\r\n})\r\n\r\n$util.toJson($context.result)\r\n```\r\n\r\nThe invalidation filter requires additional logic in the publishing side (mutation) defined with the `$extensions.invalidateSubscriptions()` method in the GraphQL resolver’s Response Mapping template of a mutation linked to the subscription via the `@aws_subscribe` directive in the GraphQL schema:\r\n\r\n```\r\n# Response Mapping Template - removeFromGroup mutation\r\n\r\n$extensions.invalidateSubscriptions({\r\n    subscriptionField: ""onGroupRemoval"",\r\n    payload: {\r\n            ""userID"": $ctx.args.userID\r\n            ""group"": $ctx.args.group\r\n    }\r\n})      \r\n$util.toJson($context.result)\r\n```\r\n\r\nThe following attributes are required to invalidate one or more subscriptions linked to the mutation:\r\n\r\n* `subscriptionField` : defines one or more subscriptions that should be invalidated after the linked mutation is invoked. In this case the subscription `onGroupRemoval` will be invalidated.\r\n* `payload` : All subscriptions defined in `subscriptionField` will be invalidated if all corresponding invalidation filters evaluate true against the defined payload.\r\n\r\nIn the example above, where users and groups are managed in a DynamoDB table, a mutation can be invoked to remove a user from a specific group and trigger the invalidation. A subscription defined in the `subscriptionField` of `$extensions.invalidateSubscriptions()` is then invalidated if it matches the filter defined in the `payload`. All subscribed clients from this user will be automatically unsubscribed in case data should be pushed just to remaining members of the group:\r\n\r\n```\r\nmutation groupRemoval{\r\n     removeFromGroup(userId: ""jdoe"", group: ""admin"") {\r\n        userId\r\n        group\r\n     }\r\n }\r\n```\r\n\r\n\r\n### Conclusion ###\r\n\r\nIn summary, with this proposal GraphQL Resolvers in AppSync would support 3 new extensions:\r\n\r\n* `$extensions.setSubscriptionFilter()`: defined in the Subscription resolver with generic filters for all clients\r\n* `$extensions.invalidateSubscriptions()`: defined in the Mutation resolver to trigger a subscription invalidation based on an invalidation filter\r\n* `$extensions.setSubscriptionInvalidationFilter()`: defined in the Subcription resolver with a specific invalidation filter linked to a Mutation that triggers an invalidation \r\n\r\nIf there are no `$extensions` defined in any GraphQL resolver’s response mapping template for a mutation (invalidation) or subscription (filtering and/or invalidation), the previous subscriptions behavior is enforced where clients define arguments to filter real-time data and subscription resolvers are triggered only at connect/subscribe time.\r\n\r\nPlease comment on this thread if you have some thoughts or suggestions on this feature or if you think we’re missing any story points which you would love to see as a part of this feature.\r\n', 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/reactions', 'total_count': 25, '+1': 9, '-1': 0, 'laugh': 0, 'hooray': 5, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 11}, 'timeline_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/timeline', 'performed_via_github_app': None}}",closed,HTML
21129998154,IssueCommentEvent,aws/aws-appsync-community,0.0,2022-04-05T21:06:52Z,"{'action': 'created', 'issue': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186', 'repository_url': 'https://api.github.com/repos/aws/aws-appsync-community', 'labels_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/labels{/name}', 'comments_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/comments', 'events_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/events', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/186', 'id': 1047818222, 'node_id': 'I_kwDOCkKyTs4-dG_u', 'number': 186, 'title': 'RFC: AppSync Enhanced Subscriptions Filtering', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'labels': [{'id': 1250088166, 'node_id': 'MDU6TGFiZWwxMjUwMDg4MTY2', 'url': 'https://api.github.com/repos/aws/aws-appsync-community/labels/rfc', 'name': 'rfc', 'color': 'e535ab', 'default': False, 'description': 'Request for Comments'}], 'state': 'closed', 'locked': False, 'assignee': None, 'assignees': [], 'milestone': None, 'comments': 21, 'created_at': '2021-11-08T19:05:22Z', 'updated_at': '2022-04-05T21:06:52Z', 'closed_at': '2022-04-05T21:06:51Z', 'author_association': 'COLLABORATOR', 'active_lock_reason': None, 'body': 'AWS AppSync leverages GraphQL subscriptions to push data to clients that choose to listen to specific events from the backend. This means that you can easily and effortlessly make any supported data source in AppSync real-time with connection management handled automatically between the client and the service. A backend service can easily broadcast data to connected clients or clients can send data to other clients, depending on the use case. Real-time data, connections, scalability, fan-out and broadcasting are all handled by intelligent client libraries and AppSync, allowing you to focus on your application business use cases and requirements instead of dealing with the complex infrastructure to manage WebSockets connections at scale. Subscriptions are invoked in response to a mutation or change in data. In other words, when data is modified via a GraphQL mutation operation, AppSync notifies subscribers of that data change on successful completion of the mutation. In short, a mutation *publishes* data which is sent to clients *subscribed* to it.\r\n\r\nCustomers using AppSync real-time subscriptions sometimes want to filter or restrict data sent to specific subscribed clients. An example could be a chat app where 1:1 conversations are private and only users in a specific conversation can receive messages. To accomplish this today, arguments can be defined in the subscription on the client side which means, for instance, AppSync can send data only to clients listening for just a particular ID. There’s a limit of 5 arguments based on strict equality (i.e. the order of arguments matter) that can be defined in a client-side subscription, which can be combined using AND logic only (i.e. events from location X AND date Y AND description Z) allowing for some flexibility when filtering data to subscribed clients (more details on https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-data.html#using-subscription-arguments). If there’s a need to invalidate an active subscription connection and refresh the data due to a change such as group membership, the client must forcibly close and re-open the WSS connection.\r\n\r\nWe’re evaluating adding service-side enhanced filtering capabilities in AppSync to enable use cases where developers would want to define fine grained filtering criteria for real-time GraphQL subscriptions on the AppSync backend itself as opposed to the client side. These service-side filters would support additional OR logic and operators such as:\r\n\r\n|Operator\t|Description\t|Allow value type\t|\r\n|---\t|---\t|---\t|\r\n|eq\t|Equal\t|Integer, String, Boolean\t|\r\n|ne\t|Not equal\t|Integer, String, Boolean\t|\r\n|le\t|Less than or equal\t|Integer\t|\r\n|lt\t|Less than\t|Integer\t|\r\n|ge\t|Greater than or equal\t|Integer\t|\r\n|gt\t|Greater than\t|Integer\t|\r\n|contains\t|Checks for a subsequence, or value in a set\t|Integer, String\t|\r\n|notContains\t|Checks for absence of a subsequence, or absence of a value in a set.\t|Integer, String\t|\r\n|beginsWith\t|Checks for a prefix\t|String\t|\r\n|in\t|Checks for matching elements in a list\t|Integer, String\t|\r\n|notIn\t|Checks for matching elements in a list\t|Integer, String\t|\r\n|between\t|Between two values\t|Interger, String\t|\r\n\r\nWe propose these new real-time enhanced filtering capabilities in AppSync would enable additional business logic for filtering or authorization to be executed at runtime whenever data is pushed to a subscribed client with filters defined in the GraphQL API backend itself as opposed to the current implementation with filtering arguments defined on the client side. As an example, if a user is removed from a group, the new capability would allow a subscription connection to be automatically invalidated without any action from the client.\r\n\r\n\r\n\r\n\r\n### Detailed Example: Filtering ###\r\n\r\nThe following details the configuration of an example ticket management system powered by an AppSync GraphQL API. Tickets are created with a mutation, data is stored in a DynamoDB table, and subscribed clients should receive notifications based on ticket severity, priority, classification or groups. \r\n\r\nEnhanced filters are enabled in the GraphQL resolver’s **Response Mapping Template** of a given subscription called `onTicketCreated` defined in the GraphQL schema and are implemented using the `$extensions.setSubscriptionFilter()` method to define a filter expression that is evaluated against published data that the subscription might be interested in. You can find more information about AppSync request/response mapping templates in https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-overview.html.\r\n\r\nA filter group defines a list or group of filters. Filters are defined with one or more of rules, each one with fields, operators and values. In the following example, multiple rules in a filter are evaluated with an AND logic and multiple filters in a filter group with an OR logic:\r\n\r\n```\r\n# Response Mapping Template - OnTicketCreated subscription\r\n\r\n$extensions.setSubscriptionFilter({\r\n    ""filterGroup"": [\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""severity"",\r\n                    ""operator"" : ""ge"",\r\n                    ""value"" : 7\r\n                },\r\n                {\r\n                    ""fieldName"" : ""priority"",\r\n                    ""operator"" : ""in"",\r\n                    ""value"" : [""high"", ""medium""]\r\n                }\r\n           ]\r\n           \r\n        },\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""classification"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : ""Security""\r\n                },\r\n                {\r\n                    ""fieldName"" : ""group"",\r\n                    ""operator"" : ""in"",\r\n                    ""value"" : [""admin"", ""operators""]\r\n                }\r\n           ]\r\n           \r\n        }\r\n    ]\r\n})\r\n\r\n$util.toJson($context.result)\r\n```\r\n\r\nWhen data is published using a mutation such as:\r\n\r\n```\r\nmutation TicketCreate{\r\n     createTicket(input: {description: ""This is a ticket."", group: ""admin"", classification: ""Security"", priority: ""high"", severity: 10}) {\r\n        id\r\n        classification\r\n        group\r\n        description\r\n        priority\r\n        severity\r\n     }\r\n }\r\n```\r\n\r\nSubscribed clients just need to have a subscription in place listening for the data to be automatically pushed via WebSockets upon ticket creation by the mutation:\r\n\r\n```\r\nsubscription OnTicketCreated{\r\n     onTicketCreated {\r\n        id\r\n        classification\r\n        group\r\n        description\r\n        priority\r\n        severity\r\n     }\r\n }\r\n```\r\n\r\nWith the service-side filters defined in the above example, important tickets will be automatically pushed to subscribed API clients if a ticket is created with either *high or medium priority* AND *severity 7 or higher* OR *classified as security tickets* assigned to either the *admin or the operators groups*. Lower priority tickets can still be manually queried however newly created tickets will be filtered in the backend and won’t be pushed in real-time to WebSocket clients. On the client side, clients just need to be subscribed with a subscription without arguments as all filters are defined service side such as:\r\n\r\n```\r\n#Amplify JS client\r\n\r\nimport Amplify, { API, graphqlOperation } from \'aws-amplify\';\r\nimport * as subscriptions from \'./graphql/subscriptions\';\r\n\r\n...\r\nconst subscription = API.graphql(\r\n    graphqlOperation(subscriptions.onTicketCreated)\r\n).subscribe({\r\n    next: ({ provider, value }) => console.log({ provider, value }),\r\n    error: error => console.warn(error)\r\n});\r\n```\r\n\r\n\r\n### Detailed Example: Invalidation ###\r\n\r\nThis example is unrelated to the ticket system on the previous example, it should be looked at in isolation.\r\n\r\nThere might be a requirement to force unsubscribe clients from the server side as opposed to use unsubscribe logic on the client side. Unsubscribing would close the connection so clients don’t receive data from the subscription anymore. This is accomplished in the following example via mutation (pub) and subscription (sub) operations defined in the GraphQL schema:\r\n\r\n```\r\n...\r\n\r\ntype User {\r\n    userID: ID!\r\n    userName: String\r\n    group: String\r\n}\r\n\r\ntype Mutation {\r\n    removeFromGroup(userID: ID!, group: String!): User\r\n}\r\n\r\ntype Subscription {\r\n    onGroupRemoval: User\r\n        @aws_subscribe(mutations: [""removeFromGroup""])\r\n}\r\n```\r\n\r\n\r\nWith enhanced filtering, active subscriptions can also be forcibly invalidated from AppSync by defining an invalidation filter with the `$extensions.setSubscriptionInvalidationFilter()` method in the subscription GraphQL resolver’s Response Mapping Template.\r\n\r\n```\r\n# Response Mapping Template - onGroupRemoval subscription\r\n\r\n$extensions.setSubscriptionInvalidationFilter({\r\n    ""filterGroup"": [\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""userID"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : $ctx.result.userID\r\n                },\r\n                {\r\n                    ""fieldName"" : ""group"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : $ctx.result.group\r\n                }\r\n           ]\r\n    ]\r\n})\r\n\r\n$util.toJson($context.result)\r\n```\r\n\r\nThe invalidation filter requires additional logic in the publishing side (mutation) defined with the `$extensions.invalidateSubscriptions()` method in the GraphQL resolver’s Response Mapping template of a mutation linked to the subscription via the `@aws_subscribe` directive in the GraphQL schema:\r\n\r\n```\r\n# Response Mapping Template - removeFromGroup mutation\r\n\r\n$extensions.invalidateSubscriptions({\r\n    subscriptionField: ""onGroupRemoval"",\r\n    payload: {\r\n            ""userID"": $ctx.args.userID\r\n            ""group"": $ctx.args.group\r\n    }\r\n})      \r\n$util.toJson($context.result)\r\n```\r\n\r\nThe following attributes are required to invalidate one or more subscriptions linked to the mutation:\r\n\r\n* `subscriptionField` : defines one or more subscriptions that should be invalidated after the linked mutation is invoked. In this case the subscription `onGroupRemoval` will be invalidated.\r\n* `payload` : All subscriptions defined in `subscriptionField` will be invalidated if all corresponding invalidation filters evaluate true against the defined payload.\r\n\r\nIn the example above, where users and groups are managed in a DynamoDB table, a mutation can be invoked to remove a user from a specific group and trigger the invalidation. A subscription defined in the `subscriptionField` of `$extensions.invalidateSubscriptions()` is then invalidated if it matches the filter defined in the `payload`. All subscribed clients from this user will be automatically unsubscribed in case data should be pushed just to remaining members of the group:\r\n\r\n```\r\nmutation groupRemoval{\r\n     removeFromGroup(userId: ""jdoe"", group: ""admin"") {\r\n        userId\r\n        group\r\n     }\r\n }\r\n```\r\n\r\n\r\n### Conclusion ###\r\n\r\nIn summary, with this proposal GraphQL Resolvers in AppSync would support 3 new extensions:\r\n\r\n* `$extensions.setSubscriptionFilter()`: defined in the Subscription resolver with generic filters for all clients\r\n* `$extensions.invalidateSubscriptions()`: defined in the Mutation resolver to trigger a subscription invalidation based on an invalidation filter\r\n* `$extensions.setSubscriptionInvalidationFilter()`: defined in the Subcription resolver with a specific invalidation filter linked to a Mutation that triggers an invalidation \r\n\r\nIf there are no `$extensions` defined in any GraphQL resolver’s response mapping template for a mutation (invalidation) or subscription (filtering and/or invalidation), the previous subscriptions behavior is enforced where clients define arguments to filter real-time data and subscription resolvers are triggered only at connect/subscribe time.\r\n\r\nPlease comment on this thread if you have some thoughts or suggestions on this feature or if you think we’re missing any story points which you would love to see as a part of this feature.\r\n', 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/reactions', 'total_count': 25, '+1': 9, '-1': 0, 'laugh': 0, 'hooray': 5, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 11}, 'timeline_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/timeline', 'performed_via_github_app': None}, 'comment': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/comments/1089350054', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/186#issuecomment-1089350054', 'issue_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186', 'id': 1089350054, 'node_id': 'IC_kwDOCkKyTs5A7imm', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'created_at': '2022-04-05T21:06:51Z', 'updated_at': '2022-04-05T21:06:51Z', 'author_association': 'COLLABORATOR', 'body': ""I'm excited to share Enhanced Subscriptions Filtering is now available in AppSync, more information on:\r\n\r\nhttps://aws.amazon.com/blogs/mobile/appsync-enhanced-filtering/\r\nhttps://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-enhanced-filtering.html\r\n\r\nThank you all for the feedback!\r\n"", 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/comments/1089350054/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'performed_via_github_app': None}}",created,HTML
20135665601,IssueCommentEvent,aws/aws-appsync-community,0.0,2022-02-08T17:36:19Z,"{'action': 'created', 'issue': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186', 'repository_url': 'https://api.github.com/repos/aws/aws-appsync-community', 'labels_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/labels{/name}', 'comments_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/comments', 'events_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/events', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/186', 'id': 1047818222, 'node_id': 'I_kwDOCkKyTs4-dG_u', 'number': 186, 'title': 'RFC: AppSync Enhanced Subscriptions Filtering', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'labels': [{'id': 1250088166, 'node_id': 'MDU6TGFiZWwxMjUwMDg4MTY2', 'url': 'https://api.github.com/repos/aws/aws-appsync-community/labels/rfc', 'name': 'rfc', 'color': 'e535ab', 'default': False, 'description': 'Request for Comments'}], 'state': 'open', 'locked': False, 'assignee': None, 'assignees': [], 'milestone': None, 'comments': 19, 'created_at': '2021-11-08T19:05:22Z', 'updated_at': '2022-02-08T17:36:19Z', 'closed_at': None, 'author_association': 'COLLABORATOR', 'active_lock_reason': None, 'body': 'AWS AppSync leverages GraphQL subscriptions to push data to clients that choose to listen to specific events from the backend. This means that you can easily and effortlessly make any supported data source in AppSync real-time with connection management handled automatically between the client and the service. A backend service can easily broadcast data to connected clients or clients can send data to other clients, depending on the use case. Real-time data, connections, scalability, fan-out and broadcasting are all handled by intelligent client libraries and AppSync, allowing you to focus on your application business use cases and requirements instead of dealing with the complex infrastructure to manage WebSockets connections at scale. Subscriptions are invoked in response to a mutation or change in data. In other words, when data is modified via a GraphQL mutation operation, AppSync notifies subscribers of that data change on successful completion of the mutation. In short, a mutation *publishes* data which is sent to clients *subscribed* to it.\r\n\r\nCustomers using AppSync real-time subscriptions sometimes want to filter or restrict data sent to specific subscribed clients. An example could be a chat app where 1:1 conversations are private and only users in a specific conversation can receive messages. To accomplish this today, arguments can be defined in the subscription on the client side which means, for instance, AppSync can send data only to clients listening for just a particular ID. There’s a limit of 5 arguments based on strict equality (i.e. the order of arguments matter) that can be defined in a client-side subscription, which can be combined using AND logic only (i.e. events from location X AND date Y AND description Z) allowing for some flexibility when filtering data to subscribed clients (more details on https://docs.aws.amazon.com/appsync/latest/devguide/aws-appsync-real-time-data.html#using-subscription-arguments). If there’s a need to invalidate an active subscription connection and refresh the data due to a change such as group membership, the client must forcibly close and re-open the WSS connection.\r\n\r\nWe’re evaluating adding service-side enhanced filtering capabilities in AppSync to enable use cases where developers would want to define fine grained filtering criteria for real-time GraphQL subscriptions on the AppSync backend itself as opposed to the client side. These service-side filters would support additional OR logic and operators such as:\r\n\r\n|Operator\t|Description\t|Allow value type\t|\r\n|---\t|---\t|---\t|\r\n|eq\t|Equal\t|Integer, String, Boolean\t|\r\n|ne\t|Not equal\t|Integer, String, Boolean\t|\r\n|le\t|Less than or equal\t|Integer\t|\r\n|lt\t|Less than\t|Integer\t|\r\n|ge\t|Greater than or equal\t|Integer\t|\r\n|gt\t|Greater than\t|Integer\t|\r\n|contains\t|Checks for a subsequence, or value in a set\t|Integer, String\t|\r\n|notContains\t|Checks for absence of a subsequence, or absence of a value in a set.\t|Integer, String\t|\r\n|beginsWith\t|Checks for a prefix\t|String\t|\r\n|in\t|Checks for matching elements in a list\t|Integer, String\t|\r\n|notIn\t|Checks for matching elements in a list\t|Integer, String\t|\r\n|between\t|Between two values\t|Interger, String\t|\r\n\r\nWe propose these new real-time enhanced filtering capabilities in AppSync would enable additional business logic for filtering or authorization to be executed at runtime whenever data is pushed to a subscribed client with filters defined in the GraphQL API backend itself as opposed to the current implementation with filtering arguments defined on the client side. As an example, if a user is removed from a group, the new capability would allow a subscription connection to be automatically invalidated without any action from the client.\r\n\r\n\r\n\r\n\r\n### Detailed Example: Filtering ###\r\n\r\nThe following details the configuration of an example ticket management system powered by an AppSync GraphQL API. Tickets are created with a mutation, data is stored in a DynamoDB table, and subscribed clients should receive notifications based on ticket severity, priority, classification or groups. \r\n\r\nEnhanced filters are enabled in the GraphQL resolver’s **Response Mapping Template** of a given subscription called `onTicketCreated` defined in the GraphQL schema and are implemented using the `$extensions.setSubscriptionFilter()` method to define a filter expression that is evaluated against published data that the subscription might be interested in. You can find more information about AppSync request/response mapping templates in https://docs.aws.amazon.com/appsync/latest/devguide/resolver-mapping-template-reference-overview.html.\r\n\r\nA filter group defines a list or group of filters. Filters are defined with one or more of rules, each one with fields, operators and values. In the following example, multiple rules in a filter are evaluated with an AND logic and multiple filters in a filter group with an OR logic:\r\n\r\n```\r\n# Response Mapping Template - OnTicketCreated subscription\r\n\r\n$extensions.setSubscriptionFilter({\r\n    ""filterGroup"": [\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""severity"",\r\n                    ""operator"" : ""ge"",\r\n                    ""value"" : 7\r\n                },\r\n                {\r\n                    ""fieldName"" : ""priority"",\r\n                    ""operator"" : ""in"",\r\n                    ""value"" : [""high"", ""medium""]\r\n                }\r\n           ]\r\n           \r\n        },\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""classification"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : ""Security""\r\n                },\r\n                {\r\n                    ""fieldName"" : ""group"",\r\n                    ""operator"" : ""in"",\r\n                    ""value"" : [""admin"", ""operators""]\r\n                }\r\n           ]\r\n           \r\n        }\r\n    ]\r\n})\r\n\r\n$util.toJson($context.result)\r\n```\r\n\r\nWhen data is published using a mutation such as:\r\n\r\n```\r\nmutation TicketCreate{\r\n     createTicket(input: {description: ""This is a ticket."", group: ""admin"", classification: ""Security"", priority: ""high"", severity: 10}) {\r\n        id\r\n        classification\r\n        group\r\n        description\r\n        priority\r\n        severity\r\n     }\r\n }\r\n```\r\n\r\nSubscribed clients just need to have a subscription in place listening for the data to be automatically pushed via WebSockets upon ticket creation by the mutation:\r\n\r\n```\r\nsubscription OnTicketCreated{\r\n     onTicketCreated {\r\n        id\r\n        classification\r\n        group\r\n        description\r\n        priority\r\n        severity\r\n     }\r\n }\r\n```\r\n\r\nWith the service-side filters defined in the above example, important tickets will be automatically pushed to subscribed API clients if a ticket is created with either *high or medium priority* AND *severity 7 or higher* OR *classified as security tickets* assigned to either the *admin or the operators groups*. Lower priority tickets can still be manually queried however newly created tickets will be filtered in the backend and won’t be pushed in real-time to WebSocket clients. On the client side, clients just need to be subscribed with a subscription without arguments as all filters are defined service side such as:\r\n\r\n```\r\n#Amplify JS client\r\n\r\nimport Amplify, { API, graphqlOperation } from \'aws-amplify\';\r\nimport * as subscriptions from \'./graphql/subscriptions\';\r\n\r\n...\r\nconst subscription = API.graphql(\r\n    graphqlOperation(subscriptions.onTicketCreated)\r\n).subscribe({\r\n    next: ({ provider, value }) => console.log({ provider, value }),\r\n    error: error => console.warn(error)\r\n});\r\n```\r\n\r\n\r\n### Detailed Example: Invalidation ###\r\n\r\nThis example is unrelated to the ticket system on the previous example, it should be looked at in isolation.\r\n\r\nThere might be a requirement to force unsubscribe clients from the server side as opposed to use unsubscribe logic on the client side. Unsubscribing would close the connection so clients don’t receive data from the subscription anymore. This is accomplished in the following example via mutation (pub) and subscription (sub) operations defined in the GraphQL schema:\r\n\r\n```\r\n...\r\n\r\ntype User {\r\n    userID: ID!\r\n    userName: String\r\n    group: String\r\n}\r\n\r\ntype Mutation {\r\n    removeFromGroup(userID: ID!, group: String!): User\r\n}\r\n\r\ntype Subscription {\r\n    onGroupRemoval: User\r\n        @aws_subscribe(mutations: [""removeFromGroup""])\r\n}\r\n```\r\n\r\n\r\nWith enhanced filtering, active subscriptions can also be forcibly invalidated from AppSync by defining an invalidation filter with the `$extensions.setSubscriptionInvalidationFilter()` method in the subscription GraphQL resolver’s Response Mapping Template.\r\n\r\n```\r\n# Response Mapping Template - onGroupRemoval subscription\r\n\r\n$extensions.setSubscriptionInvalidationFilter({\r\n    ""filterGroup"": [\r\n        {\r\n           ""filters"" : [\r\n                {\r\n                    ""fieldName"" : ""userID"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : $ctx.result.userID\r\n                },\r\n                {\r\n                    ""fieldName"" : ""group"",\r\n                    ""operator"" : ""eq"",\r\n                    ""value"" : $ctx.result.group\r\n                }\r\n           ]\r\n    ]\r\n})\r\n\r\n$util.toJson($context.result)\r\n```\r\n\r\nThe invalidation filter requires additional logic in the publishing side (mutation) defined with the `$extensions.invalidateSubscriptions()` method in the GraphQL resolver’s Response Mapping template of a mutation linked to the subscription via the `@aws_subscribe` directive in the GraphQL schema:\r\n\r\n```\r\n# Response Mapping Template - removeFromGroup mutation\r\n\r\n$extensions.invalidateSubscriptions({\r\n    subscriptionField: ""onGroupRemoval"",\r\n    payload: {\r\n            ""userID"": $ctx.args.userID\r\n            ""group"": $ctx.args.group\r\n    }\r\n})      \r\n$util.toJson($context.result)\r\n```\r\n\r\nThe following attributes are required to invalidate one or more subscriptions linked to the mutation:\r\n\r\n* `subscriptionField` : defines one or more subscriptions that should be invalidated after the linked mutation is invoked. In this case the subscription `onGroupRemoval` will be invalidated.\r\n* `payload` : All subscriptions defined in `subscriptionField` will be invalidated if all corresponding invalidation filters evaluate true against the defined payload.\r\n\r\nIn the example above, where users and groups are managed in a DynamoDB table, a mutation can be invoked to remove a user from a specific group and trigger the invalidation. A subscription defined in the `subscriptionField` of `$extensions.invalidateSubscriptions()` is then invalidated if it matches the filter defined in the `payload`. All subscribed clients from this user will be automatically unsubscribed in case data should be pushed just to remaining members of the group:\r\n\r\n```\r\nmutation groupRemoval{\r\n     removeFromGroup(userId: ""jdoe"", group: ""admin"") {\r\n        userId\r\n        group\r\n     }\r\n }\r\n```\r\n\r\n\r\n### Conclusion ###\r\n\r\nIn summary, with this proposal GraphQL Resolvers in AppSync would support 3 new extensions:\r\n\r\n* `$extensions.setSubscriptionFilter()`: defined in the Subscription resolver with generic filters for all clients\r\n* `$extensions.invalidateSubscriptions()`: defined in the Mutation resolver to trigger a subscription invalidation based on an invalidation filter\r\n* `$extensions.setSubscriptionInvalidationFilter()`: defined in the Subcription resolver with a specific invalidation filter linked to a Mutation that triggers an invalidation \r\n\r\nIf there are no `$extensions` defined in any GraphQL resolver’s response mapping template for a mutation (invalidation) or subscription (filtering and/or invalidation), the previous subscriptions behavior is enforced where clients define arguments to filter real-time data and subscription resolvers are triggered only at connect/subscribe time.\r\n\r\nPlease comment on this thread if you have some thoughts or suggestions on this feature or if you think we’re missing any story points which you would love to see as a part of this feature.\r\n', 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/reactions', 'total_count': 15, '+1': 3, '-1': 0, 'laugh': 0, 'hooray': 3, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 9}, 'timeline_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186/timeline', 'performed_via_github_app': None}, 'comment': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/comments/1032881102', 'html_url': 'https://github.com/aws/aws-appsync-community/issues/186#issuecomment-1032881102', 'issue_url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/186', 'id': 1032881102, 'node_id': 'IC_kwDOCkKyTs49kIPO', 'user': {'login': 'awsed', 'id': 12226594, 'node_id': 'MDQ6VXNlcjEyMjI2NTk0', 'avatar_url': 'https://avatars.githubusercontent.com/u/12226594?v=4', 'gravatar_id': '', 'url': 'https://api.github.com/users/awsed', 'html_url': 'https://github.com/awsed', 'followers_url': 'https://api.github.com/users/awsed/followers', 'following_url': 'https://api.github.com/users/awsed/following{/other_user}', 'gists_url': 'https://api.github.com/users/awsed/gists{/gist_id}', 'starred_url': 'https://api.github.com/users/awsed/starred{/owner}{/repo}', 'subscriptions_url': 'https://api.github.com/users/awsed/subscriptions', 'organizations_url': 'https://api.github.com/users/awsed/orgs', 'repos_url': 'https://api.github.com/users/awsed/repos', 'events_url': 'https://api.github.com/users/awsed/events{/privacy}', 'received_events_url': 'https://api.github.com/users/awsed/received_events', 'type': 'User', 'site_admin': False}, 'created_at': '2022-02-08T17:36:19Z', 'updated_at': '2022-02-08T17:36:19Z', 'author_association': 'COLLABORATOR', 'body': ""Maybe I'm missing something, @markomilicevic , but I believe you could have something like a groupID in your schema and send a single mutation to that groupID as argument. All users in the group would receive a message as a single mutation would trigger subscriptions to be broadcasted to all users in the group. It's a similar concept in a chat appliaction where users are in a chat room and messages are sent to the ChatRoomID, all users in the room receive the message and no one else. If someone is removed from the group/chat room, the new Invalidation feature in Enhanced Filtering would allow to unsubscribe that single user from the AppSync service side."", 'reactions': {'url': 'https://api.github.com/repos/aws/aws-appsync-community/issues/comments/1032881102/reactions', 'total_count': 0, '+1': 0, '-1': 0, 'laugh': 0, 'hooray': 0, 'confused': 0, 'heart': 0, 'rocket': 0, 'eyes': 0}, 'performed_via_github_app': None}}",created,HTML
